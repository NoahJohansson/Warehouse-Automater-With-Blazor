@page "/products"

@using Projekt_OOP2_Grupp_24.Data

@inject IProductRepo productService;
@inject ICustomerRepo customerService;

<h1> Products </h1>
<div class="container">
        <table class="table">
            <thead>
                <tr>
                    <th>Product information</th>
                    <td></td>
                    <td></td>
                    <td>
                        <input class ="custom-checkbox" type="checkbox" @onclick="(() => checkBoxClick())"/>
                        Show only products with empty stock <br />
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Product name</td>
                    <td>Price</td>
                    <td>Description</td>
                    <td>Stock</td>
                    <td>Restocking date</td>

                </tr>
                @foreach (var prod in Products)
                {
                    <tr @onclick="(() => SetProductForUpdates(prod))">
                        <td> @prod.Name </td>
                        <td> @prod.Price </td>
                        <td> @prod.Description </td>
                        <td> @prod.Stock </td>
                        <td> @prod.RestockingDate </td>

                        <td>
                            <button class="btn btn-danger" @onclick="(()=>
                        DeleteProduct(prod))">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    
</div>

<div class="row m-5">
    <div class="col-5 bg-light m-3 justify-content-start">
        <div class="p-3 mb-3 bg-primary text-white text-center">
            Add new Product
        </div>
        <EditForm Model="@newProduct" OnValidSubmit="(() => AddNewProduct())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Product name</label>
                <input type="text" id="name" class="form-control" @bind-value="@newProduct.Name" />
            </div>
            <div class="form-group">
                <label for="name">Product price</label>
                <input type="number" id="price" class="form-control" @bind-value="@newProduct.Price" />
            </div>
            <div class="form-group">
                <label for="name">Product description</label>
                <input type="text" id="description" class="form-control" @bind-value="@newProduct.Description" />
            </div>
            <div class="form-group">
                <label for="name">Product stock</label>
                <input type="number" id="stock" class="form-control" @bind-value="@newProduct.Stock" />
            </div>
            <div class="text-center p-3 mb-3">
                <button class="btn btn-success" type="submit">Add product</button>
            </div>
        </EditForm>

    </div>

    <div class="col-5 bg-light m-3 justify-content-start">
        <div class="p-3 mb-3 bg-primary text-white text-center">
            Update Product
        </div>
        <EditForm Model="@updatedProduct" OnValidSubmit="(() => UpdateProduct())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Product name</label>
                <input type="text" id="name" class="form-control" @bind-value="@updatedProduct.Name" />
            </div>
            <div class="form-group">
                <label for="price">Product price</label>
                <input type="number" id="price" class="form-control" @bind-value="@updatedProduct.Price" />
            </div>
            <div class="form-group">
                <label for="description">Product description</label>
                <input type="text" id="description" class="form-control" @bind-value="@updatedProduct.Description" />
            </div>
            <div class="form-group">
                <label for="stock">Product stock</label>
                <input type="number" id="stock" class="form-control" @bind-value="@updatedProduct.Stock" />
            </div>

            <div class="text-center p-3 mb-3">
                <button class="btn btn-info" type="submit">
                    Update
                    Product
                </button>
            </div>
        </EditForm>
    </div>
</div>




@code{

    List<Product> Products;
    Product newProduct = new Product();
    bool checkboxChecked = true;
    Product updatedProduct = new Product();


    protected override async Task OnInitializedAsync()
    {
        Products = await productService.GetProductsAsync();
        productService.ProductChanged += UpdateGUI;
    }


    /// <summary>
    /// Updates checkBoxChecked
    /// </summary>
    private void checkBoxClick()
    {
        if (checkboxChecked) { checkboxChecked = false;}
        else                 { checkboxChecked = true; }
        UpdateGUI();
    }

    /// <summary>
    /// Updates GUI
    /// </summary>
    private async void UpdateGUI()
    {
        if (checkboxChecked)
        {
            Products = await productService.GetProductsAsync();
        }
        else
        {
            Products = await productService.GetProductsWithNoStock();
        }
    }

    /// <summary>
    /// Adds product and clears value of newProduct
    /// </summary>
    private void AddNewProduct()
    {
        productService.AddProductsAsync(newProduct);
        newProduct = new Product();
    }

    /// <summary>
    /// Deletes product
    /// </summary>
    /// <param name="product"> Produc that is to be deleted </param>
    private void DeleteProduct(Product product)
    {
        productService.RemoveProductsAsync(product);
    }

    /// <summary>
    /// Sets product for update
    /// </summary>
    /// <param name="selected"> Product that is set to be updated</param>
    private void SetProductForUpdates(Product selected)
    {
        updatedProduct = selected;
    }

    /// <summary>
    /// Updates product in database
    /// </summary>
    private void UpdateProduct()
    {
        productService.UpdateProductsAsync(updatedProduct);
        updatedProduct = new Product();
    }
}
