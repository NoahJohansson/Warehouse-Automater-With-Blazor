@page "/Customers"

@using Projekt_OOP2_Grupp_24.Data

@inject IProductRepo productService;
@inject ICustomerRepo customerService;

<h1> Customers </h1>
<div class="container">
    @if (!Customers.Any())
    {
        <p> <em> No customers in database </em> </p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Customer information</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Customer name</td>
                    <td>Email</td>
                    <td>Phone</td>
                    <td></td>
                </tr>
                @foreach (var cust in Customers)
                {
                <tr @onclick="(() => SetCustomerForUpdates(cust))">
                <td> @cust.Name </td>
                <td> @cust.Email </td>
                <td> @cust.Phone </td>

                <td>
                    <button class="btn btn-danger" @onclick="(()=>
                        DeleteCustomer(cust))">
                        Delete
                    </button>
                </td>
            </tr>
                }
            </tbody>
        </table>
    }
</div>
<div class="row m-5">
    <div class="col-5 bg-light m-3 justify-content-start">
        <div class="p-3 mb-3 bg-primary text-white text-center">
            Add new Customer
        </div>
        <EditForm Model="@newCustomer" OnValidSubmit="(() => AddNewCustomer())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Customer name</label>
                <input type="text" id="name" class="form-control" @bind-value="@newCustomer.Name" />
            </div>
            <div class="form-group">
                <label for="name">Customer email</label>
                <input type="text" id="email" class="form-control" @bind-value="@newCustomer.Email" />
            </div>
            <div class="form-group">
                <label for="name">Customer phone</label>
                <input type="text" id="phone" class="form-control" @bind-value="@newCustomer.Phone" />
            </div>
            <div class="text-center p-3 mb-3">
                <button class="btn btn-success" type="submit">Add customer</button>
            </div>
        </EditForm>

    </div>

    <div class="col-5 bg-light m-3 justify-content-start">
        <div class="p-3 mb-3 bg-primary text-white text-center">
            Update Customer
        </div>
        <EditForm Model="@updatedCustomer" OnValidSubmit="(() => UpdateCustomer())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Name </label>
                <input type="text" id="name" class="form-control" @bind-value="@updatedCustomer.Name" />
            </div>
            <div class="form-group">
                <label for="email">Email  </label>
                <input type="text" id="email" class="form-control" @bind-value="@updatedCustomer.Email" />
            </div>
            <div class="form-group">
                <label for="phone">Phone  </label>
                <input type="text" id="phone" class="form-control" @bind-value="@updatedCustomer.Phone" />
            </div>
            <div class="text-center p-3 mb-3">
                <button class="btn btn-info" type="submit">
                    Update
                    Customer
                </button>
            </div>
        </EditForm>
    </div>
</div>




    @code{

        List<Customer> Customers;

        protected override async Task OnInitializedAsync()
        {
            Customers = await customerService.GetCustomersAsync();
            customerService.CustomerChanged += UpdateGUI;
        }

        /// <summary>
        /// Updates GUI
        /// </summary>
        private async void UpdateGUI()
        {
            Customers = await customerService.GetCustomersAsync();
        }

        Customer newCustomer = new Customer();
        /// <summary>
        /// Adds new customer to database and clears newCustomer
        /// </summary>
        private void AddNewCustomer()
        {
            customerService.AddCustomersAsync(newCustomer);
            newCustomer = new Customer();
        }

        /// <summary>
        /// Deletes customer from database
        /// </summary>
        /// <param name="customer"> the customer that is to be deleted</param>
        private void DeleteCustomer(Customer customer)
        {
            customerService.RemoveCustomersAsync(customer);
        }

        Customer updatedCustomer = new Customer();

        /// <summary>
        /// Sets customer to be updated
        /// </summary>
        /// <param name="selected"> The customer that is to be updated </param>
        private void SetCustomerForUpdates(Customer selected)
        {
            updatedCustomer = selected;
        }

        /// <summary>
        /// Updates customer in database
        /// </summary>
        private void UpdateCustomer()
        {
            customerService.UpdateCustomersAsync(updatedCustomer);
            updatedCustomer = new Customer();
        }
    }
